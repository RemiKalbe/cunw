name: Continuous tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    name: Test on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose

  is-unpublished:
    runs-on: ubuntu-latest
    name: Is this version unpublished?
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Install toml
        run: cargo install toml-cli
      - name: Extract version from Cargo.toml
        id: extract_version
        run: |
          VERSION=$(toml get Cargo.toml package.version | tr -d '"')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "PACKAGE_VERSION=${VERSION}" >> $GITHUB_ENV
      - name: Extract crate name from Cargo.toml
        id: extract_crate_name
        run: echo "PACKAGE_NAME=$(toml get Cargo.toml package.name | tr -d '"')" >> $GITHUB_ENV
      - name: Get latest published version
        id: latest_version
        run: echo "LATEST_VERSION=$(cargo search ${{ env.PACKAGE_NAME }} --limit 1 | grep -oP '(?<=").*(?=")' | head -1)" >> $GITHUB_ENV
      - name: Compare versions
        run: |
          if [ "$(printf '%s\n' "${{ env.LATEST_VERSION }}" "${{ env.PACKAGE_VERSION }}" | sort -V | tail -n1)" = "${{ env.PACKAGE_VERSION }}" ] && [ "${{ env.PACKAGE_VERSION }}" != "${{ env.LATEST_VERSION }}" ]; then
            echo "Local version (${{ env.PACKAGE_VERSION }}) is newer than the latest published version (${{ env.LATEST_VERSION }})"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          else
            echo "Local version (${{ env.PACKAGE_VERSION }}) is not newer than the latest published version (${{ env.LATEST_VERSION }})"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

  call-publish:
    needs: [test, is-unpublished]
    if: >
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      needs.is-unpublished.outputs.should_publish == 'true' &&
      startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/publish.yaml
    with:
      version: ${{ needs.is-unpublished.outputs.version }}
    secrets: inherit
